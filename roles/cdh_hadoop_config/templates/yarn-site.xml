<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- {{ ansible_managed }} -->

<configuration>

    <!-- CPU Cores -->
    <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>{{ ansible_processor_count * ansible_processor_cores * ansible_processor_threads_per_core }}</value>
    </property>

    <!-- Memory limits -->
    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>{{ ansible_memtotal_mb - 1024 }}</value>
    </property>
    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>{{ ansible_memtotal_mb - 1024 }}</value>
    </property>

    <!-- Fair scheduling is a method of assigning resources to jobs such that all jobs get, on average, an equal
    share of resources over time. When there is a single job running, that job uses the entire cluster. -->
    <property>
        <name>yarn.resourcemanager.scheduler.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>
    </property>


    <!--inherited configurations-->
    <property>
       <name>yarn.nodemanager.aux-services</name>
       <value>mapreduce_shuffle</value>
     </property>

     <property>
         <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
         <value>org.apache.hadoop.mapred.ShuffleHandler</value>
     </property>

    <!-- blocked out for HA
     <property>
         <name>yarn.resourcemanager.hostname</name>
         <value>master01</value>
     </property>   
    -->

     <property>
         <name>yarn.log-aggregation-enable</name>
         <value>true</value>
     </property>

     <property>
         <description>List of directories to store localized files in.</description>
         <name>yarn.nodemanager.local-dirs</name>
         <value>/data/yarn/local</value>
     </property>
	
     <property>
         <description>Where to store container logs.</description>
         <name>yarn.nodemanager.log-dirs</name>
         <value>/data/yarn/logs</value>
     </property>

     <property>
         <description>Where to aggregate logs to.</description>
         <name>yarn.nodemanager.remote-app-log-dir</name>
         <value>hdfs://{{ site_name|lower }}/var/log/hadoop-yarn/apps</value>
     </property>


    <property>
        <description>Classpath for typical applications.</description>
        <name>yarn.application.classpath</name>
        <value>
           $HADOOP_CONF_DIR,
           $HADOOP_COMMON_HOME/*,$HADOOP_COMMON_HOME/lib/*,
           $HADOOP_HDFS_HOME/*,$HADOOP_HDFS_HOME/lib/*,
           $HADOOP_MAPRED_HOME/*,$HADOOP_MAPRED_HOME/lib/*,
           $HADOOP_YARN_HOME/*,$HADOOP_YARN_HOME/lib/*
        </value>
     </property>
     
     <!-- Resource Manager HA -->
     <property>
         <name>yarn.resourcemanager.connect.retry-interval.ms</name>
         <value>2000</value>
     </property>

     <property>
         <name>yarn.resourcemanager.ha.enabled</name>
         <value>true</value>
     </property>

     <property>
         <name>yarn.resourcemanager.cluster-id</name>
         <value>{{ site_name|lower }}</value>
     </property>

     <property>
         <name>yarn.resourcemanager.ha.rm-ids</name>
         <value>{% for host in groups['resourcemanagers'] %}rm{{ loop.index }}{% if not loop.last %},{% endif %}{% endfor %}</value>
     </property>

     <property>
         <name>yarn.resourcemanager.hostname.rm1</name>
         <value>{{ groups['primaryresourcemanager'][0] }}</value>
     </property>

     <property>
         <name>yarn.resourcemanager.hostname.rm2</name>
         <value>{{ groups['backupresourcemanager'][0] }}</value>
     </property>

     <property>
         <name>yarn.resourcemanager.webapp.address.rm1</name>
         <value>{{ groups['primaryresourcemanager'][0] }}:8088</value>
     </property>

     <property>
         <name>yarn.resourcemanager.webapp.address.rm2</name>
         <value>{{ groups['backupresourcemanager'][0] }}:8088</value>
     </property>

     <!--Automatic fail over recovery-->
     <property>
         <name>yarn.resourcemanager.ha.automatic-failover.enabled</name>
         <value>true</value>
     </property>
     <property>
         <name>yarn.resourcemanager.ha.automatic-failover.embedded</name>
         <value>true</value>
     </property>

     <property>
         <name>yarn.resourcemanager.recovery.enabled</name>
         <value>true</value>
     </property>

     <property>
         <name>yarn.resourcemanager.store.class</name>
         <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
     </property>


     <property>
         <name>yarn.resourcemanager.zk-address</name>
         <value>{% for host in groups['zookeepers'] %}{{ hostvars[host].ipv4_address|default(hostvars[host]['ansible_default_ipv4']['address']) }}:2181{% if not loop.last %},{% endif %}{% endfor %}</value>
     </property>


     <property>
         <name>yarn.app.mapreduce.am.scheduler.connection.wait.interval-ms</name>
         <value>5000</value>
     </property>
     <property>
         <name>yarn.resourcemanager.work-preserving-recovery.enabled</name>
         <value>true</value>
     </property>

     <!-- End of Resource Manager HA--> 

     <!-- Fair scheduling is a method of assigning resources to jobs such that all jobs get, on average, an equal
    share of resources over time. When there is a single job running, that job uses the entire cluster. -->
     <property>
         <name>yarn.resourcemanager.scheduler.class</name>
         <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>
     </property>

     <!--Yarn multilhomed network-->
     <property>
         <name>yarn.resourcemanager.bind-host</name>
	 <value>0.0.0.0</value>
     </property>

     <property>
         <name>yarn.nodemanager.bind-host</name>
         <value>0.0.0.0</value>
     </property>

     <property>
         <name>yarn.timeline-service.bind-host</name>
         <value>0.0.0.0</value>
     </property>


</configuration>
