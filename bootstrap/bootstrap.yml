---
# Ansible Bootstrap
# =================

# Found on the ansible mailing list and adopted

# Creates the 'ansibler' user and adds him to the 'sudo' group. Then concatenates ansible_rsa.pub to
# the ~/.ssh/authorized_keys on the target instance with group 'sudo'. Then make sure that sudoers is set to allow
# NOPASSWD from sudo, and run everything else with ansible with 'user: ansibler' and sudo:true. This way, all ansible
# activity is logged, and we can specifically revoke the key (and terminate ansible's control) if either
# (a) security is compromised or (b) we hand over control of an instance to a client.

- hosts: all
  become: true
  tasks:
    - name: hostname should match inventory name
      hostname: name={{ inventory_hostname }}

    - name: create user 'ansibler'
      user: name=ansibler groups=sudo password=$6$t0dblcoXAnjcJbt0$4vqcO.Ppts95zVBfCopAkhy5H.2PAu09EEryAKEIhjl9NxjZYt5wa4LEnEhdwxuGjxj3qcb7iaGlUit/JJl4F1 shell=/bin/bash generate_ssh_key=yes 
      register: ansibler
    

    - debug: var=ansibler
    - debug: var=groups['all']

    - name: add 'ansibler' RSA SSH key, ansibler is the user used by site.yml, it needs to be accessed with nopassword,adding the user to sudo group and make it nopassword is not engough, keys need to be placed in authorized_key file
      authorized_key: 
        user: ansibler 
        key: "{{ ansibler.ssh_public_key }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['all'] }}" 

    - name: change sudoers to contains NOPASSWD for sudo group
      shell: "creates=/etc/sudoers.bak chdir=/etc cp sudoers sudoers.bak && sed -ri -e 's/(%sudo\\s+ALL=\\(ALL:ALL\\))\\s+ALL/\\1 NOPASSWD: ALL/' /etc/sudoers"


